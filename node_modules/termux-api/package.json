{
  "_args": [
    [
      {
        "raw": "termux-api",
        "scope": null,
        "escapedName": "termux-api",
        "name": "termux-api",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/legekka/Munka/Aixery/Aixery"
    ]
  ],
  "_from": "termux-api@latest",
  "_id": "termux-api@0.0.1",
  "_inCache": true,
  "_location": "/termux-api",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/termux-api-0.0.1.tgz_1470858182617_0.9064419085625559"
  },
  "_npmUser": {
    "name": "edupsousa",
    "email": "edupsousa@ifsp.edu.br"
  },
  "_npmVersion": "3.8.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "termux-api",
    "scope": null,
    "escapedName": "termux-api",
    "name": "termux-api",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/termux-api/-/termux-api-0.0.1.tgz",
  "_shasum": "19b275a423525eeeaa3d8563871047843ee35bdd",
  "_shrinkwrap": null,
  "_spec": "termux-api",
  "_where": "/home/legekka/Munka/Aixery/Aixery",
  "author": {
    "name": "Eduardo P de Sousa",
    "email": "edupsousa@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/edupsousa/node-termux-api/issues"
  },
  "dependencies": {},
  "description": "A wrapper module for Termux-API",
  "devDependencies": {
    "typescript": "^1.8.10"
  },
  "directories": {},
  "dist": {
    "shasum": "19b275a423525eeeaa3d8563871047843ee35bdd",
    "tarball": "https://registry.npmjs.org/termux-api/-/termux-api-0.0.1.tgz"
  },
  "files": [
    "dist/index.*",
    "dist/lib"
  ],
  "gitHead": "34ed708b522846fdd919138170c3e35682fb54b9",
  "homepage": "https://github.com/edupsousa/node-termux-api#readme",
  "keywords": [
    "android",
    "termux",
    "api"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "edupsousa",
      "email": "edupsousa@ifsp.edu.br"
    }
  ],
  "name": "termux-api",
  "optionalDependencies": {},
  "readme": "# Termux-API Wrapper for Node.JS\n\nThis project aims to create a simple interface to invoke Termux-API commands\ndirectly from Node.JS applications. To use it you need to have Termux and Termux-API\ninstalled on your Android, and Node.JS installed on the Termux environment.\n\n## What is Termux?\n\nFrom [Termux Website](https://termux.com/): \"Termux is a terminal emulator and Linux environment bringing powerful terminal access to Android.\"\n\nWith Termux you can run a small linux environment on your Android device, that means that you\ncan run a small command-line utilities or a full-featured webserver directly from\nyour Android phone.\n\nInstall [Termux from Google Play](https://play.google.com/store/apps/details?id=com.termux)\n\n## Termux-API\n\nTermux-API is a companion app to Termux, it creates an interface from Termux to your device\nfeatures, with Termux-API you can take photos from your phone camera, get location\nfrom GPS, read or send SMS, and a lot of other features. Everything directly from the emulated \nLinux terminal.\n\nInstall [Termux-API from Google Play](https://play.google.com/store/apps/details?id=com.termux.api)\n\n## Node.JS on Termux\n\nTermux brings the possibily of running Node.JS on your Android device by simply installing it\nwith APT (without rooting):\n\n```\napt update\napt install nodejs\n````\n \n # Usage\n\nInstall the package on yout NPM project by:\n\n```\nnpm install --save termux-api\n```\n\nImport the default object on JavaScript:\n\n```javascript\nvar api = require('termux-api').default;\n```\n\nOr with TypeScript:\n```typescript\nimport default as api from 'termux-api';\n```\n\nNow you have a instance of the class TermuxApi as the api variable. To invoke API commands\nyou must build it using the method createCommand().\n\nThe method createCommand() returns an instance of the ApiCommandFactory where you find\none method for each API command you could invoke on Termux-API app. For example, to show\na small popup, or [toast](https://developer.android.com/guide/topics/ui/notifiers/toasts.html)\nfor those familiarized with Android UI you can use:\n\n\n```javascript\napi.createCommand()\n    .toast()\n    .setText('Can you see me?')\n    .shortDuration()\n    .build()\n    .run();\n```\n\n* line 1: api.createCommand() returns an instance of [ApiCommandFactory](https://github.com/edupsousa/node-termux-api/blob/master/src/lib/ApiCommandFactory.ts) class.\n* line 2: ApiCommandFactory.toast() returns an instance of [ToastBuilder](https://github.com/edupsousa/node-termux-api/blob/master/src/lib/builders/ToastBuilder.ts) class.\n* line 3: ToastBuilder.setText() sets the text to be displayed and returns the ToastBuilder himself.\n* line 4: ToastBuilder.shortDuration() configures the toast to be displayed for a short while and returns himself (ToastBuilder).\n* line 5: ToastBuilder.build() builds and return a [ApiCommand](https://github.com/edupsousa/node-termux-api/blob/master/src/lib/ApiCommand.ts) instance.\n* line 6: The command is run. \n\nThe process for calling other commands are very similar, you only need to change the\ncommand (line 2) and the options (lines 3 and 4). For example, to vibrate the \nphone for 1 second (1000 ms):\n\n```javascript\napi.createCommand()\n    .vibrate()\n    .setDuration(1000)\n    .build()\n    .run();\n```\n\nYou can see all commands available on [ApiCommandFactory](https://github.com/edupsousa/node-termux-api/blob/master/src/lib/ApiCommandFactory.ts) \nsource-code. And options for each command are availabe on the correspondent class in the\n[builders](https://github.com/edupsousa/node-termux-api/tree/master/src/lib/builders) folder.\n\n### Returning data from the API\n\nSome API commands return data as String or JSON. To gather that data\nyou could use the instance of [ApiResult](https://github.com/edupsousa/node-termux-api/blob/master/src/lib/ApiResult.ts)\nclass returned by the method run() by invoking the methods getOutputObject() or getOutputString().\n\nNotice that those 2 methods executes asynchronously returning ES6 \n[Promises](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nthat resolves to an Object ou a String, respectively.\n\nFor example to get a location update from GPS and show the returned object on console:\n\n```javascript\nlet result = api.createCommand()\n            .location()\n            .fromGPSProvider()\n            .requestOnce()\n            .build()\n            .run();\n\nresult.getOutputObject()\n    .then(function(location) {\n        console.log('Last known location: ', location);\n    });\n\n```\n\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/edupsousa/node-termux-api.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "typings": "dist/index.d.ts",
  "version": "0.0.1"
}
